/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Knowledge Trees
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
 */
import { KnowledgeTreesApp } from './core/KnowledgeTreesApp.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
let app;
let uiManager;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded, initializing modular app...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = new KnowledgeTreesApp();
        
        // –î–µ–ª–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ onclick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        window.app = app;
        window.uiManager = app.uiManager;
        
        console.log('‚úÖ Modular Knowledge Trees App initialized');
        console.log('‚úÖ App available globally:', typeof window.app);
        console.log('‚úÖ UI Manager available:', typeof window.uiManager);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        if (typeof window.uiManager.selectItem !== 'function') {
            console.error('‚ùå selectItem method not available!');
        }
        if (typeof window.uiManager.deleteItem !== 'function') {
            console.error('‚ùå deleteItem method not available!');
        }
        
    } catch (error) {
        console.error('‚ùå Error initializing modular app:', error);
    }
});

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'loading') {
    console.log('üìã DOM still loading, waiting for DOMContentLoaded...');
} else {
    console.log('üìã DOM already loaded, initializing immediately...');
    setTimeout(() => {
        if (!window.app) {
            console.log('üîÑ App not initialized yet, doing it now...');
            try {
                app = new KnowledgeTreesApp();
                window.app = app;
                window.uiManager = app.uiManager;
                console.log('‚úÖ App initialized via fallback method');
            } catch (error) {
                console.error('‚ùå Fallback initialization failed:', error);
            }
        }
    }, 100);
}

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò =====
window.testApp = function() {
    console.log('üß™ TESTING MODULAR APP...');
    console.log('App exists:', !!window.app);
    console.log('UI Manager exists:', !!window.uiManager);
    console.log('selectItem exists:', !!(window.uiManager && window.uiManager.selectItem));
    console.log('deleteItem exists:', !!(window.uiManager && window.uiManager.deleteItem));
    
    if (window.app) {
        console.log('Current category:', window.app.currentCategory);
        console.log('Data Manager:', !!window.app.dataManager);
        console.log('Tree Manager:', !!window.app.treeManager);
        console.log('Notes Manager:', !!window.app.notesManager);
        console.log('GitHub Sync:', !!window.app.githubSync);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const firstItem = document.querySelector('.tree-item');
        if (firstItem) {
            const id = firstItem.getAttribute('data-tree-id');
            console.log('Testing click on first item with ID:', id);
            if (id && window.uiManager) {
                window.uiManager.selectItem(id);
            }
        }
    }
};

window.debugClick = function(id) {
    console.log('üñ±Ô∏è DEBUG CLICK: Simulating click on ID:', id);
    if (window.uiManager && window.uiManager.selectItem) {
        window.uiManager.selectItem(id);
    } else {
        console.error('UI Manager or selectItem not available');
    }
};

window.testSidebar = function() {
    console.log('üß™ TESTING SIDEBAR...');
    const sidebarItems = document.querySelectorAll('.tree-item');
    console.log('Sidebar items found:', sidebarItems.length);
    
    sidebarItems.forEach((item, index) => {
        const id = item.getAttribute('data-tree-id');
        const content = item.querySelector('.tree-item-content');
        const deleteBtn = item.querySelector('.tree-delete-btn');
        
        console.log(`Item ${index + 1}:`, {
            id: id,
            hasContent: !!content,
            hasDeleteBtn: !!deleteBtn,
            onclick: content ? content.getAttribute('onclick') : 'none'
        });
    });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if (sidebarItems.length > 0) {
        const firstItem = sidebarItems[0];
        const id = firstItem.getAttribute('data-tree-id');
        console.log('Testing click on first sidebar item:', id);
        if (window.uiManager && id) {
            window.uiManager.selectItem(id);
        }
    }
};

window.testModules = function() {
    console.log('üß™ TESTING MODULES...');
    
    if (window.app) {
        console.log('üìä Data Manager methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(window.app.dataManager)));
        console.log('üå≥ Tree Manager methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(window.app.treeManager)));
        console.log('üìù Notes Manager methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(window.app.notesManager)));
        console.log('üé® UI Manager methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(window.app.uiManager)));
        console.log('‚òÅÔ∏è GitHub Sync methods:', Object.getOwnPropertyNames(Object.getPrototypeOf(window.app.githubSync)));
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const trees = window.app.dataManager.getTrees();
        const notes = window.app.dataManager.getNotes();
        const stats = window.app.dataManager.getStats();
        
        console.log('üìà Current data:', {
            trees: trees.length,
            notes: notes.length,
            stats: stats
        });
    } else {
        console.error('‚ùå App not available for module testing');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { app };
