/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ä–µ–≤—å—è–º–∏ –∑–Ω–∞–Ω–∏–π
 */
import { generateId } from '../utils/helpers.js';
import { isValidTreeStructure, isValidNodeLevel } from '../utils/validators.js';

export class TreeManager {
    constructor(dataManager) {
        this.dataManager = dataManager;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ
     */
    createTree(treeData) {
        const tree = {
            id: generateId(),
            name: treeData.name,
            description: treeData.description || '',
            category: treeData.category || 'other',
            nodes: [],
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        if (!isValidTreeStructure(tree)) {
            throw new Error('Invalid tree structure');
        }

        return this.dataManager.addTree(tree);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ
     */
    updateTree(id, updates) {
        const tree = this.dataManager.getTree(id);
        if (!tree) {
            throw new Error('Tree not found');
        }

        const updatedTree = { ...tree, ...updates };
        if (!isValidTreeStructure(updatedTree)) {
            throw new Error('Invalid tree structure after update');
        }

        return this.dataManager.updateTree(id, updates);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –¥–µ—Ä–µ–≤–æ
     */
    deleteTree(id) {
        const tree = this.dataManager.getTree(id);
        if (!tree) {
            throw new Error('Tree not found');
        }

        return this.dataManager.deleteTree(id);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –ø–æ ID
     */
    getTree(id) {
        return this.dataManager.getTree(id);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–µ—Ä–µ–≤—å—è
     */
    getAllTrees() {
        return this.dataManager.getTrees();
    }

    /**
     * –ü–æ–∏—Å–∫ –¥–µ—Ä–µ–≤—å–µ–≤
     */
    searchTrees(query) {
        return this.dataManager.searchTrees(query);
    }

    /**
     * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getTreesByCategory(category) {
        return this.dataManager.getTreesByCategory(category);
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —É–∑–µ–ª –≤ –¥–µ—Ä–µ–≤–æ
     */
    addNode(treeId, nodeData) {
        const tree = this.dataManager.getTree(treeId);
        if (!tree) {
            throw new Error('Tree not found');
        }

        const node = {
            id: generateId(),
            title: nodeData.title,
            icon: nodeData.icon || 'üå±',
            content: nodeData.content || '',
            level: nodeData.level || 0,
            parentId: nodeData.parentId || null,
            children: [],
            expanded: true,
            createdAt: new Date().toISOString()
        };

        if (!isValidNodeLevel(node.level)) {
            throw new Error('Invalid node level');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ—Å—Ç–æ
        if (node.parentId) {
            const parentNode = this.findNodeById(tree.nodes, node.parentId);
            if (parentNode) {
                parentNode.children.push(node);
            } else {
                throw new Error('Parent node not found');
            }
        } else {
            tree.nodes.push(node);
        }

        return this.dataManager.updateTree(treeId, { nodes: tree.nodes });
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —É–∑–µ–ª
     */
    updateNode(treeId, nodeId, updates) {
        const tree = this.dataManager.getTree(treeId);
        if (!tree) {
            throw new Error('Tree not found');
        }

        const node = this.findNodeById(tree.nodes, nodeId);
        if (!node) {
            throw new Error('Node not found');
        }

        Object.assign(node, updates);
        return this.dataManager.updateTree(treeId, { nodes: tree.nodes });
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —É–∑–µ–ª
     */
    deleteNode(treeId, nodeId) {
        const tree = this.dataManager.getTree(treeId);
        if (!tree) {
            throw new Error('Tree not found');
        }

        const removed = this.removeNodeById(tree.nodes, nodeId);
        if (!removed) {
            throw new Error('Node not found');
        }

        return this.dataManager.updateTree(treeId, { nodes: tree.nodes });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ—Å—Ç–∏ —É–∑–ª–∞
     */
    toggleNodeExpanded(treeId, nodeId) {
        const tree = this.dataManager.getTree(treeId);
        if (!tree) {
            throw new Error('Tree not found');
        }

        const node = this.findNodeById(tree.nodes, nodeId);
        if (!node) {
            throw new Error('Node not found');
        }

        node.expanded = !node.expanded;
        return this.dataManager.updateTree(treeId, { nodes: tree.nodes });
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —É–∑–µ–ª
     */
    moveNode(treeId, nodeId, newParentId, newLevel) {
        const tree = this.dataManager.getTree(treeId);
        if (!tree) {
            throw new Error('Tree not found');
        }

        // –£–¥–∞–ª—è–µ–º —É–∑–µ–ª –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–∞
        const node = this.removeNodeById(tree.nodes, nodeId, true);
        if (!node) {
            throw new Error('Node not found');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–∑–ª–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –¥–µ—Ç–µ–π
        this.updateNodeLevels(node, newLevel);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
        if (newParentId) {
            const parentNode = this.findNodeById(tree.nodes, newParentId);
            if (parentNode) {
                parentNode.children.push(node);
            } else {
                throw new Error('New parent node not found');
            }
        } else {
            tree.nodes.push(node);
        }

        return this.dataManager.updateTree(treeId, { nodes: tree.nodes });
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç —É–∑–µ–ª –ø–æ ID —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
     */
    findNodeById(nodes, nodeId) {
        for (const node of nodes) {
            if (node.id === nodeId) {
                return node;
            }
            if (node.children && node.children.length > 0) {
                const found = this.findNodeById(node.children, nodeId);
                if (found) return found;
            }
        }
        return null;
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —É–∑–µ–ª –ø–æ ID —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
     */
    removeNodeById(nodes, nodeId, returnNode = false) {
        for (let i = 0; i < nodes.length; i++) {
            if (nodes[i].id === nodeId) {
                const removed = nodes.splice(i, 1)[0];
                return returnNode ? removed : true;
            }
            if (nodes[i].children && nodes[i].children.length > 0) {
                const result = this.removeNodeById(nodes[i].children, nodeId, returnNode);
                if (result) return result;
            }
        }
        return returnNode ? null : false;
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–Ω–∏ —É–∑–ª–∞ –∏ –≤—Å–µ—Ö –µ–≥–æ –¥–µ—Ç–µ–π
     */
    updateNodeLevels(node, newLevel) {
        node.level = newLevel;
        if (node.children && node.children.length > 0) {
            node.children.forEach(child => {
                this.updateNodeLevels(child, newLevel + 1);
            });
        }
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ
     */
    countNodes(tree) {
        return this.dataManager.countTreeNodes(tree);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–∑–ª—ã –¥–µ—Ä–µ–≤–∞ –≤ –ø–ª–æ—Å–∫–æ–º –≤–∏–¥–µ
     */
    getFlatNodesList(tree) {
        const flatNodes = [];
        
        const traverse = (nodes) => {
            nodes.forEach(node => {
                flatNodes.push(node);
                if (node.children && node.children.length > 0) {
                    traverse(node.children);
                }
            });
        };

        if (tree.nodes) {
            traverse(tree.nodes);
        }

        return flatNodes;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ—Ä–µ–≤–∞ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞
     */
    createSampleTree() {
        const sampleTree = {
            name: "–î–µ—Ä–µ–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            description: "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±–∑–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–µ",
            category: "business"
        };

        const tree = this.createTree(sampleTree);

        // –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –ø—Ä–∏–º–µ—Ä–∞
        const rootNodes = [
            {
                title: "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å",
                icon: "üè¢",
                content: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—è–º–∏",
                level: 0
            },
            {
                title: "–¶–∏—Ñ—Ä–æ–≤–æ–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                icon: "üíª",
                content: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ IT-—Ä–µ—à–µ–Ω–∏—è –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                level: 0
            },
            {
                title: "–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
                icon: "ü§ù",
                content: "–ë–∏–∑–Ω–µ—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º",
                level: 0
            }
        ];

        rootNodes.forEach(nodeData => {
            this.addNode(tree.id, nodeData);
        });

        return tree;
    }
}
