/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Knowledge Trees
 */
import { DataManager } from './DataManager.js';
import { TreeManager } from './TreeManager.js';
import { NotesManager } from './NotesManager.js';
import { UIManager } from '../ui/UIManager.js';
import { GitHubSync } from '../sync/GitHubSync.js';
import { generateId } from '../utils/helpers.js';
import { isValidBackup } from '../utils/validators.js';

export class KnowledgeTreesApp {
    constructor() {
        console.log('üöÄ Initializing Knowledge Trees App...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.dataManager = new DataManager();
        this.treeManager = new TreeManager(this.dataManager);
        this.notesManager = new NotesManager(this.dataManager);
        this.uiManager = new UIManager();
        this.githubSync = new GitHubSync();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.currentCategory = 'trees';
        this.currentItem = null;
        this.currentItemId = null;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    init() {
        try {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
            this.uiManager.init();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.renderItemsList();
            this.updateStats();
            
            console.log('‚úÖ Knowledge Trees App initialized successfully');
        } catch (error) {
            console.error('‚ùå Error initializing app:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        const createBtn = document.getElementById('createBtn');
        const createFirstBtn = document.getElementById('createFirstBtn');
        const createSampleBtn = document.getElementById('createSampleBtn');

        if (createBtn) {
            createBtn.addEventListener('click', () => this.openCreateModal());
        }
        if (createFirstBtn) {
            createFirstBtn.addEventListener('click', () => this.openCreateModal());
        }
        if (createSampleBtn) {
            createSampleBtn.addEventListener('click', () => this.createSampleItem());
        }

        // –ö–Ω–æ–ø–∫–∏ –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞
        const importBtn = document.getElementById('importBtn');
        const exportCurrentBtn = document.getElementById('exportCurrentBtn');
        const exportAllBtn = document.getElementById('exportAllBtn');

        if (importBtn) {
            importBtn.addEventListener('click', () => this.openImportModal());
        }
        if (exportCurrentBtn) {
            exportCurrentBtn.addEventListener('click', () => this.exportCurrentCategory());
        }
        if (exportAllBtn) {
            exportAllBtn.addEventListener('click', () => this.exportAllData());
        }

        // GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        const syncSettingsBtn = document.getElementById('syncSettingsBtn');
        if (syncSettingsBtn) {
            syncSettingsBtn.addEventListener('click', () => this.githubSync.openSyncModal());
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        this.setupModalHandlers();

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.setupGitHubHandlers();

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        this.setupCustomEvents();
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
     */
    setupModalHandlers() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞/–∑–∞–º–µ—Ç–∫–∏
        const saveTreeBtn = document.getElementById('saveTree');
        if (saveTreeBtn) {
            saveTreeBtn.addEventListener('click', () => this.saveItem());
        }

        // –ò–º–ø–æ—Ä—Ç
        const executeImportBtn = document.getElementById('executeImport');
        if (executeImportBtn) {
            executeImportBtn.addEventListener('click', () => this.executeImport());
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        const importFile = document.getElementById('importFile');
        if (importFile) {
            importFile.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const importText = document.getElementById('importText');
                        if (importText) {
                            importText.value = e.target.result;
                        }
                    };
                    reader.readAsText(file);
                }
            });
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ GitHub —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    setupGitHubHandlers() {
        const saveSyncSettingsBtn = document.getElementById('saveSyncSettings');
        const testConnectionBtn = document.getElementById('testConnection');
        const syncNowBtn = document.getElementById('syncNow');
        const downloadFromGithubBtn = document.getElementById('downloadFromGithub');
        const clearRepositoryBtn = document.getElementById('clearRepository');

        if (saveSyncSettingsBtn) {
            saveSyncSettingsBtn.addEventListener('click', () => this.githubSync.saveSyncSettings());
        }
        if (testConnectionBtn) {
            testConnectionBtn.addEventListener('click', () => this.githubSync.testConnection());
        }
        if (syncNowBtn) {
            syncNowBtn.addEventListener('click', () => this.syncToGitHub());
        }
        if (downloadFromGithubBtn) {
            downloadFromGithubBtn.addEventListener('click', () => this.githubSync.loadFromGitHub());
        }
        if (clearRepositoryBtn) {
            clearRepositoryBtn.addEventListener('click', () => this.githubSync.clearRepository());
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
     */
    setupCustomEvents() {
        // –ó–∞–ø—Ä–æ—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        document.addEventListener('requestItems', (e) => {
            const { category } = e.detail;
            const items = category === 'trees' ? this.dataManager.getTrees() : this.dataManager.getNotes();
            this.uiManager.renderItemsList(items);
        });

        // –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
        document.addEventListener('selectItem', (e) => {
            const { id, category } = e.detail;
            const item = category === 'trees' ? this.dataManager.getTree(id) : this.dataManager.getNote(id);
            if (item) {
                this.uiManager.displaySelectedItem(item);
            }
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        document.addEventListener('deleteItem', (e) => {
            const { id, category } = e.detail;
            this.deleteItem(id, category);
        });

        // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.addEventListener('searchItems', (e) => {
            const { query, category } = e.detail;
            const items = category === 'trees' 
                ? this.dataManager.searchTrees(query)
                : this.dataManager.searchNotes(query);
            this.uiManager.renderItemsList(items);
        });

        // –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        document.addEventListener('requestStats', () => {
            const stats = this.dataManager.getStats();
            this.uiManager.updateStats(stats);
        });

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        document.addEventListener('showNotification', (e) => {
            const { message, type } = e.detail;
            this.uiManager.showNotification(message, type);
        });

        // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        document.addEventListener('importData', (e) => {
            const { data } = e.detail;
            this.importData(data);
        });
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è
     */
    openCreateModal() {
        const modal = document.getElementById('treeModal');
        const title = document.getElementById('treeModalTitle');
        
        if (modal && title) {
            title.textContent = this.currentCategory === 'trees' ? '–°–æ–∑–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É';
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            this.clearForm();
            
            this.uiManager.openModal('treeModal');
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    clearForm() {
        const nameInput = document.getElementById('treeName');
        const descriptionInput = document.getElementById('treeDescription');
        const categorySelect = document.getElementById('treeCategory');

        if (nameInput) nameInput.value = '';
        if (descriptionInput) descriptionInput.value = '';
        if (categorySelect) categorySelect.value = 'other';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç (–¥–µ—Ä–µ–≤–æ –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É)
     */
    saveItem() {
        const nameInput = document.getElementById('treeName');
        const descriptionInput = document.getElementById('treeDescription');
        const categorySelect = document.getElementById('treeCategory');

        if (!nameInput || !nameInput.value.trim()) {
            this.uiManager.showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', 'error');
            return;
        }

        const itemData = {
            name: nameInput.value.trim(),
            category: categorySelect ? categorySelect.value : 'other'
        };

        try {
            let createdItem;
            
            if (this.currentCategory === 'trees') {
                itemData.description = descriptionInput ? descriptionInput.value.trim() : '';
                createdItem = this.treeManager.createTree(itemData);
            } else {
                itemData.content = descriptionInput ? descriptionInput.value.trim() : '';
                createdItem = this.notesManager.createNote(itemData);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.renderItemsList();
            this.updateStats();
            this.selectItem(createdItem.id);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            this.uiManager.closeModal('treeModal');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const itemType = this.currentCategory === 'trees' ? '–î–µ—Ä–µ–≤–æ' : '–ó–∞–º–µ—Ç–∫–∞';
            this.uiManager.showNotification(`${itemType} —Å–æ–∑–¥–∞–Ω${this.currentCategory === 'trees' ? '–æ' : '–∞'} —É—Å–ø–µ—à–Ω–æ!`, 'success');
            
            // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            this.triggerAutoSync();
            
        } catch (error) {
            console.error('Error saving item:', error);
            this.uiManager.showNotification(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${error.message}`, 'error');
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç
     */
    deleteItem(id, category = null) {
        const currentCategory = category || this.currentCategory;
        
        try {
            if (currentCategory === 'trees') {
                this.treeManager.deleteTree(id);
            } else {
                this.notesManager.deleteNote(id);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.renderItemsList();
            this.updateStats();
            
            // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
            if (this.currentItemId === id) {
                this.currentItem = null;
                this.currentItemId = null;
                this.uiManager.showWelcomeScreen();
            }
            
            const itemType = currentCategory === 'trees' ? '–î–µ—Ä–µ–≤–æ' : '–ó–∞–º–µ—Ç–∫–∞';
            this.uiManager.showNotification(`${itemType} —É–¥–∞–ª–µ–Ω${currentCategory === 'trees' ? '–æ' : '–∞'}`, 'success');
            
            // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            this.triggerAutoSync();
            
        } catch (error) {
            console.error('Error deleting item:', error);
            this.uiManager.showNotification(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
        }
    }

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç
     */
    selectItem(id) {
        const item = this.currentCategory === 'trees' 
            ? this.dataManager.getTree(id)
            : this.dataManager.getNote(id);
            
        if (item) {
            this.uiManager.displaySelectedItem(item);
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    renderItemsList() {
        const items = this.currentCategory === 'trees' 
            ? this.dataManager.getTrees()
            : this.dataManager.getNotes();
        this.uiManager.renderItemsList(items);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    updateStats() {
        const stats = this.dataManager.getStats();
        this.uiManager.updateStats(stats);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    createSampleItem() {
        try {
            let sampleItem;
            
            if (this.currentCategory === 'trees') {
                sampleItem = this.treeManager.createSampleTree();
            } else {
                sampleItem = this.notesManager.createSampleNote();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.renderItemsList();
            this.updateStats();
            this.selectItem(sampleItem.id);
            
            const itemType = this.currentCategory === 'trees' ? '–¥–µ—Ä–µ–≤–æ' : '–∑–∞–º–µ—Ç–∫–∞';
            this.uiManager.showNotification(`–ü—Ä–∏–º–µ—Ä ${itemType} —Å–æ–∑–¥–∞–Ω!`, 'success');
            
            // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            this.triggerAutoSync();
            
        } catch (error) {
            console.error('Error creating sample:', error);
            this.uiManager.showNotification(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: ${error.message}`, 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏–º–ø–æ—Ä—Ç–∞
     */
    openImportModal() {
        this.uiManager.openModal('importModal');
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
     */
    executeImport() {
        const importText = document.getElementById('importText');
        if (!importText || !importText.value.trim()) {
            this.uiManager.showNotification('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞', 'error');
            return;
        }

        try {
            const data = JSON.parse(importText.value.trim());
            
            if (!isValidBackup(data)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }

            this.importData(data);
            
        } catch (error) {
            console.error('Import error:', error);
            this.uiManager.showNotification(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`, 'error');
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
     */
    importData(data) {
        try {
            let importedData = data;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if (data.backup && data.backup.type === 'full_backup') {
                importedData = data.data;
            }

            const success = this.dataManager.importData(importedData);
            
            if (success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.renderItemsList();
                this.updateStats();
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                this.uiManager.closeModal('importModal');
                
                const treesCount = importedData.trees?.length || 0;
                const notesCount = importedData.notes?.length || 0;
                
                let message = '–î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ';
                if (treesCount > 0) message += `${treesCount} –¥–µ—Ä–µ–≤—å–µ–≤`;
                if (notesCount > 0) {
                    if (treesCount > 0) message += ', ';
                    message += `${notesCount} –∑–∞–º–µ—Ç–æ–∫`;
                }
                
                this.uiManager.showNotification(message, 'success');
                
                // –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                this.triggerAutoSync();
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
            }
            
        } catch (error) {
            console.error('Import data error:', error);
            this.uiManager.showNotification(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
     */
    exportCurrentCategory() {
        const items = this.currentCategory === 'trees' 
            ? this.dataManager.getTrees()
            : this.dataManager.getNotes();

        const exportData = {
            [this.currentCategory]: items,
            exportedAt: new Date().toISOString(),
            category: this.currentCategory,
            version: '1.0'
        };

        const filename = `${this.currentCategory}-${new Date().toISOString().split('T')[0]}.json`;
        this.downloadJSON(exportData, filename);
        
        const itemType = this.currentCategory === 'trees' ? '–¥–µ—Ä–µ–≤—å–µ–≤' : '–∑–∞–º–µ—Ç–æ–∫';
        this.uiManager.showNotification(`üì§ –≠–∫—Å–ø–æ—Ä—Ç ${itemType} –∑–∞–≤–µ—Ä—à–µ–Ω (${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`, 'success');
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
     */
    exportAllData() {
        const trees = this.dataManager.getTrees();
        const notes = this.dataManager.getNotes();
        const stats = this.dataManager.getStats();

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const backupData = {
            backup: {
                version: '2.0',
                type: 'full_backup',
                created: new Date().toISOString(),
                createdBy: 'Knowledge Trees App',
                device: this.getDeviceInfo(),
                totalItems: trees.length + notes.length
            },
            statistics: stats,
            data: {
                trees: trees,
                notes: notes
            },
            settings: this.getAppSettings()
        };

        const timestamp = new Date().toISOString().split('T')[0];
        const filename = `knowledge-backup-${timestamp}.json`;
        
        this.downloadJSON(backupData, filename);
        this.uiManager.showNotification(`üì¶ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ (${trees.length} –¥–µ—Ä–µ–≤—å–µ–≤, ${notes.length} –∑–∞–º–µ—Ç–æ–∫)`, 'success');
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å GitHub
     */
    syncToGitHub() {
        const data = {
            trees: this.dataManager.getTrees(),
            notes: this.dataManager.getNotes()
        };
        
        this.githubSync.syncSimple(data);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
     */
    triggerAutoSync() {
        const data = {
            trees: this.dataManager.getTrees(),
            notes: this.dataManager.getNotes()
        };
        
        this.githubSync.onDataChange(data);
    }

    /**
     * –°–∫–∞—á–∏–≤–∞–µ—Ç JSON —Ñ–∞–π–ª
     */
    downloadJSON(data, filename) {
        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
     */
    getDeviceInfo() {
        return {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            screen: {
                width: screen.width,
                height: screen.height
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    getAppSettings() {
        const settings = {
            theme: localStorage.getItem('theme') || 'auto',
            language: localStorage.getItem('language') || 'ru',
            autoSync: localStorage.getItem('autoSync') === 'true',
            lastSync: localStorage.getItem('lastSync'),
            syncBranch: localStorage.getItem('syncBranch') || 'main'
        };
        
        // –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        delete settings.githubToken;
        
        return settings;
    }
}
