/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub
 */
import { encodeUTF8ToBase64, decodeBase64ToUTF8 } from '../utils/encoding.js';
import { getDeviceInfo } from '../utils/helpers.js';
import { STORAGE_KEYS } from '../config/settings.js';

export class GitHubSync {
    constructor() {
        this.settings = {
            token: '',
            repo: '',
            branch: 'main',
            autoSync: false
        };
        this.isConnected = false;
        this.cache = new Map();
        this.rateLimitRemaining = 5000;
        this.rateLimitReset = 0;
        this.loadSettings();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    loadSettings() {
        const saved = localStorage.getItem('githubSyncSettings');
        if (saved) {
            this.settings = { ...this.settings, ...JSON.parse(saved) };
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    saveSettings() {
        localStorage.setItem('githubSyncSettings', JSON.stringify(this.settings));
    }

    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    openSyncModal() {
        const modal = document.getElementById('syncModal');
        if (!modal) return;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const tokenInput = document.getElementById('githubToken');
        const repoInput = document.getElementById('githubRepo');
        const branchInput = document.getElementById('syncBranch');
        const autoSyncCheckbox = document.getElementById('autoSync');

        if (tokenInput) tokenInput.value = this.settings.token;
        if (repoInput) repoInput.value = this.settings.repo;
        if (branchInput) branchInput.value = this.settings.branch;
        if (autoSyncCheckbox) autoSyncCheckbox.checked = this.settings.autoSync;
        
        this.updateSyncStatus();
        modal.classList.add('active');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    saveSyncSettings() {
        const tokenInput = document.getElementById('githubToken');
        const repoInput = document.getElementById('githubRepo');
        const branchInput = document.getElementById('syncBranch');
        const autoSyncCheckbox = document.getElementById('autoSync');

        if (tokenInput) this.settings.token = tokenInput.value;
        if (repoInput) this.settings.repo = repoInput.value;
        if (branchInput) this.settings.branch = branchInput.value || 'main';
        if (autoSyncCheckbox) this.settings.autoSync = autoSyncCheckbox.checked;
        
        this.saveSettings();
        this.updateSyncStatus();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        const event = new CustomEvent('showNotification', {
            detail: { message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', type: 'success' }
        });
        document.dispatchEvent(event);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    updateSyncStatus() {
        const statusEl = document.getElementById('connectionStatus');
        const lastSyncEl = document.getElementById('lastSync');
        
        if (statusEl) {
            if (!this.settings.token || !this.settings.repo) {
                statusEl.textContent = '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ';
                statusEl.className = 'status-value';
            } else if (this.isConnected) {
                statusEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
                statusEl.className = 'status-value connected';
            } else {
                statusEl.textContent = '–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ';
                statusEl.className = 'status-value';
            }
        }
        
        if (lastSyncEl) {
            const lastSync = localStorage.getItem(STORAGE_KEYS.LAST_SYNC);
            if (lastSync) {
                const date = new Date(lastSync);
                lastSyncEl.textContent = date.toLocaleString('ru-RU');
            } else {
                lastSyncEl.textContent = '–ù–∏–∫–æ–≥–¥–∞';
            }
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub
     */
    async testConnection() {
        if (!this.settings.token || !this.settings.repo) {
            const event = new CustomEvent('showNotification', {
                detail: { message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π', type: 'error' }
            });
            document.dispatchEvent(event);
            return false;
        }

        try {
            const event = new CustomEvent('showNotification', {
                detail: { message: 'üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', type: 'info' }
            });
            document.dispatchEvent(event);
            
            const response = await this.makeApiRequest(`https://api.github.com/repos/${this.settings.repo}`, {
                headers: {
                    'Authorization': `token ${this.settings.token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });

            if (response.ok) {
                const repoData = await response.json();
                this.isConnected = true;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã API
                const rateLimitRemaining = response.headers.get('X-RateLimit-Remaining');
                const rateLimitReset = response.headers.get('X-RateLimit-Reset');
                
                if (rateLimitRemaining) this.rateLimitRemaining = parseInt(rateLimitRemaining);
                if (rateLimitReset) this.rateLimitReset = parseInt(rateLimitReset);
                
                this.updateSyncStatus();
                
                const successEvent = new CustomEvent('showNotification', {
                    detail: { 
                        message: `‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repoData.full_name}`, 
                        type: 'success' 
                    }
                });
                document.dispatchEvent(successEvent);
                
                return true;
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            this.isConnected = false;
            this.updateSyncStatus();
            
            const errorEvent = new CustomEvent('showNotification', {
                detail: { message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, type: 'error' }
            });
            document.dispatchEvent(errorEvent);
            
            return false;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
     */
    async syncSimple(data) {
        if (!this.isConnected) {
            const event = new CustomEvent('showNotification', {
                detail: { message: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', type: 'error' }
            });
            document.dispatchEvent(event);
            return;
        }

        try {
            const notificationEvent = new CustomEvent('showNotification', {
                detail: { message: 'üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...', type: 'info' }
            });
            document.dispatchEvent(notificationEvent);
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            const backupData = {
                backup: {
                    version: '2.0',
                    type: 'full_backup',
                    created: new Date().toISOString(),
                    createdBy: 'Knowledge Trees App',
                    device: getDeviceInfo(),
                    totalItems: (data.trees?.length || 0) + (data.notes?.length || 0)
                },
                statistics: {
                    treesCount: data.trees?.length || 0,
                    notesCount: data.notes?.length || 0,
                    totalNodes: this.calculateTotalNodes(data.trees || []),
                    categories: {
                        trees: [...new Set((data.trees || []).map(t => t.category))],
                        notes: [...new Set((data.notes || []).map(n => n.category))]
                    }
                },
                data: {
                    trees: data.trees || [],
                    notes: data.notes || []
                },
                settings: this.getAppSettings()
            };
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–∏–Ω —Ñ–∞–π–ª backup.json
            await this.uploadOrUpdateFile('backup.json', JSON.stringify(backupData, null, 2));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            localStorage.setItem(STORAGE_KEYS.LAST_SYNC, new Date().toISOString());
            this.updateSyncStatus();
            
            const successEvent = new CustomEvent('showNotification', {
                detail: { 
                    message: `‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ GitHub (${data.trees?.length || 0} –¥–µ—Ä–µ–≤—å–µ–≤, ${data.notes?.length || 0} –∑–∞–º–µ—Ç–æ–∫)`,
                    type: 'success'
                }
            });
            document.dispatchEvent(successEvent);
            
        } catch (error) {
            const errorEvent = new CustomEvent('showNotification', {
                detail: { message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${error.message}`, type: 'error' }
            });
            document.dispatchEvent(errorEvent);
            console.error('Simple sync error:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å GitHub
     */
    async loadFromGitHub() {
        if (!this.isConnected) {
            const event = new CustomEvent('showNotification', {
                detail: { message: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', type: 'error' }
            });
            document.dispatchEvent(event);
            return;
        }

        try {
            const notificationEvent = new CustomEvent('showNotification', {
                detail: { message: 'üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å GitHub...', type: 'info' }
            });
            document.dispatchEvent(notificationEvent);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º backup.json
            const response = await this.makeApiRequest(`https://api.github.com/repos/${this.settings.repo}/contents/backup.json`, {
                headers: {
                    'Authorization': `token ${this.settings.token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });

            if (!response.ok) {
                throw new Error('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏');
            }

            const fileData = await response.json();
            const content = decodeBase64ToUTF8(fileData.content);
            const backupData = JSON.parse(content);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if (!backupData.backup || backupData.backup.type !== 'full_backup') {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
            const importEvent = new CustomEvent('importData', {
                detail: { data: backupData.data }
            });
            document.dispatchEvent(importEvent);
            
            const backupDate = new Date(backupData.backup.created).toLocaleDateString('ru-RU');
            const successEvent = new CustomEvent('showNotification', {
                detail: { 
                    message: `üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (${backupDate}): ${backupData.data.trees?.length || 0} –¥–µ—Ä–µ–≤—å–µ–≤, ${backupData.data.notes?.length || 0} –∑–∞–º–µ—Ç–æ–∫`,
                    type: 'success'
                }
            });
            document.dispatchEvent(successEvent);
            
        } catch (error) {
            const errorEvent = new CustomEvent('showNotification', {
                detail: { message: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, type: 'error' }
            });
            document.dispatchEvent(errorEvent);
            console.error('Load from GitHub error:', error);
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
     */
    async clearRepository() {
        if (!this.isConnected) {
            const event = new CustomEvent('showNotification', {
                detail: { message: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', type: 'error' }
            });
            document.dispatchEvent(event);
            return;
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!confirm('‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!')) {
            return;
        }

        try {
            const notificationEvent = new CustomEvent('showNotification', {
                detail: { message: 'üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...', type: 'info' }
            });
            document.dispatchEvent(notificationEvent);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            const response = await this.makeApiRequest(`https://api.github.com/repos/${this.settings.repo}/contents`, {
                headers: {
                    'Authorization': `token ${this.settings.token}`,
                    'Accept': 'application/vnd.github.v3+json'
                }
            });

            if (response.ok) {
                const files = await response.json();
                let deletedCount = 0;
                
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
                for (const file of files) {
                    try {
                        await this.deleteFileOrFolder(file.path, file.sha);
                        deletedCount++;
                    } catch (error) {
                        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${file.path}:`, error);
                    }
                }
                
                const successEvent = new CustomEvent('showNotification', {
                    detail: { message: `üóëÔ∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—á–∏—â–µ–Ω (—É–¥–∞–ª–µ–Ω–æ ${deletedCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`, type: 'success' }
                });
                document.dispatchEvent(successEvent);
            }
            
        } catch (error) {
            const errorEvent = new CustomEvent('showNotification', {
                detail: { message: `–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: ${error.message}`, type: 'error' }
            });
            document.dispatchEvent(errorEvent);
            console.error('Clear repository error:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª
     */
    async uploadOrUpdateFile(filename, content) {
        try {
            console.log(`üì§ Processing file: ${filename}`);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            let sha = null;
            try {
                const getResponse = await this.makeApiRequest(`https://api.github.com/repos/${this.settings.repo}/contents/${filename}`, {
                    headers: {
                        'Authorization': `token ${this.settings.token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                });
                
                if (getResponse.ok) {
                    const fileData = await getResponse.json();
                    sha = fileData.sha;
                    console.log(`üîç File exists, SHA: ${sha.substring(0, 8)}...`);
                }
            } catch (error) {
                console.log(`üìÑ File doesn't exist, will create new`);
            }
            
            // –ö–æ–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ Base64 —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
            const base64Content = encodeUTF8ToBase64(content);
            
            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            const uploadData = {
                message: `Update ${filename} - ${new Date().toLocaleString('ru-RU')}`,
                content: base64Content,
                branch: this.settings.branch
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º SHA –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (sha) {
                uploadData.sha = sha;
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            const uploadResponse = await this.makeApiRequest(`https://api.github.com/repos/${this.settings.repo}/contents/${filename}`, {
                method: 'PUT',
                headers: {
                    'Authorization': `token ${this.settings.token}`,
                    'Accept': 'application/vnd.github.v3+json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(uploadData)
            });
            
            if (!uploadResponse.ok) {
                throw new Error(`Failed to upload ${filename}: ${uploadResponse.statusText}`);
            }
            
            console.log(`‚úÖ Successfully uploaded: ${filename}`);
            return uploadResponse;
            
        } catch (error) {
            console.error(`‚ùå Error uploading ${filename}:`, error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É
     */
    async deleteFileOrFolder(path, sha) {
        const response = await this.makeApiRequest(`https://api.github.com/repos/${this.settings.repo}/contents/${path}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `token ${this.settings.token}`,
                'Accept': 'application/vnd.github.v3+json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: `Delete ${path}`,
                sha: sha,
                branch: this.settings.branch
            })
        });

        if (!response.ok) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ${path}`);
        }
        
        return response;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç API –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–∏–º–∏—Ç–æ–≤
     */
    async makeApiRequest(url, options = {}) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã API
        if (this.rateLimitRemaining <= 10) {
            const resetTime = new Date(this.rateLimitReset * 1000);
            const now = new Date();
            if (now < resetTime) {
                throw new Error(`API rate limit exceeded. Reset at ${resetTime.toLocaleTimeString()}`);
            }
        }

        const response = await fetch(url, options);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
        const remaining = response.headers.get('X-RateLimit-Remaining');
        const reset = response.headers.get('X-RateLimit-Reset');
        
        if (remaining) this.rateLimitRemaining = parseInt(remaining);
        if (reset) this.rateLimitReset = parseInt(reset);
        
        return response;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
     */
    getAppSettings() {
        const settings = {
            theme: localStorage.getItem('theme') || 'auto',
            language: localStorage.getItem('language') || 'ru',
            autoSync: localStorage.getItem('autoSync') === 'true',
            lastSync: localStorage.getItem(STORAGE_KEYS.LAST_SYNC),
            syncBranch: this.settings.branch || 'main'
        };
        
        // –ù–ï —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return settings;
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤—å—è—Ö
     */
    calculateTotalNodes(trees) {
        return trees.reduce((total, tree) => {
            return total + this.countTreeNodes(tree);
        }, 0);
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–∑–ª—ã –≤ –¥–µ—Ä–µ–≤–µ
     */
    countTreeNodes(tree) {
        if (!tree.nodes || !Array.isArray(tree.nodes)) return 0;
        
        let count = tree.nodes.length;
        tree.nodes.forEach(node => {
            count += this.countNodeChildren(node);
        });
        
        return count;
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
     */
    countNodeChildren(node) {
        if (!node.children || !Array.isArray(node.children)) return 0;
        
        let count = node.children.length;
        node.children.forEach(child => {
            count += this.countNodeChildren(child);
        });
        
        return count;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
     */
    onDataChange(data) {
        if (this.settings.autoSync && this.isConnected) {
            // Debounce –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            clearTimeout(this.autoSyncTimeout);
            this.autoSyncTimeout = setTimeout(() => {
                this.syncSimple(data);
            }, 5000); // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        }
    }
}
